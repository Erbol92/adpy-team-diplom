import vk_api
from config import VK_TOKEN, GROUP_ID, USER_TOKEN
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from .any_method import params
from .iterator import UserIterator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
vk_session = vk_api.VkApi(token=VK_TOKEN)
user_session = vk_api.VkApi(token=USER_TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)

user_candidate = {}
user_iterators = {}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_start_message(user_id, message):
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_callback_button('üß≤ –ø–æ–∏—Å–∫', color=VkKeyboardColor.NEGATIVE, payload={
        "button": "search"})
    keyboard.add_callback_button('üåè —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ', color=VkKeyboardColor.POSITIVE, payload={
        "button": "geo"})
    param = params(user_id, message, keyboard)
    try:
        vk.messages.send(**param)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–∫
def get_photos(user_id: int):
    data = []
    param = {'owner_id': user_id,
             'album_id': 'profile',
             'extended': 1, }
    photos = user_session.method('photos.get', param)['items']
    if photos:
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ –ø–æ–ª—é 'like'
        sorted_data = sorted(
            photos, key=lambda x: x['likes']['count'])[-3:]
        for photo in sorted_data:
            media_id, owner_id = photo['id'], photo['owner_id']
            data.append(f'photo{owner_id}_{media_id}')
    return data


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def send_choose_message(user_id: int, message: str, candidate_id: int):
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_callback_button('üíî', color=VkKeyboardColor.NEGATIVE, payload={
        "button": "dislike", "id": candidate_id})
    keyboard.add_callback_button('‚ù§', color=VkKeyboardColor.POSITIVE, payload={
        "button": "like", "id": candidate_id})
    keyboard.add_callback_button('—Å–ª–µ–¥—É—é—â–∏–π(–∞—è)', color=VkKeyboardColor.PRIMARY,
                                 payload={"button": "next", "id": candidate_id})
    param = params(user_id, message, keyboard, get_photos(candidate_id))
    try:
        vk.messages.send(**param)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

async def send_message(user_id, message):
    param = params(user_id, message)
    try:
        vk.messages.send(**param)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏


async def geo_user(user_id, message):
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_location_button()
    param = params(user_id, message, keyboard)
    try:
        vk.messages.send(**param)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –ø–æ–ª—É—á–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫–µ–º —á–∞—Ç)
async def user_data(user_id: int):
    try:
        param = {'user_ids': user_id, 'fields': 'sex,bdate,home_town'}
        response = vk_session.method('users.get', param)
        response = response[0]
        bdate = response.get('bdate')
        sex = response.get('sex')
        city = response.get('home_town')
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ª–∏ –¥—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–º–æ—Ç—Ä–∏–º –¥–ª–∏–Ω—É (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –∏–ª–∏ –¥–µ–Ω—å/–º–µ—Å—è—Ü
        if bdate:
            if len(bdate.split('.')) == 3:
                bdate = bdate.split('.')[-1]
            else:
                bdate = None
        else:
            bdate = None
        # –º–µ–Ω—è–µ–º –ø–æ–ª –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
        match sex:
            case 1:
                sex = 2
            case 2:
                sex = 1
        if bdate and sex:
            return bdate, sex, city
        return {'message': '–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª–µ ' + '–≤–æ–∑—Ä–∞—Å—Ç ' if not bdate else '' + '–ø–æ–ª' if not sex else ''}
    except Exception as E:
        return {'message': f'–æ—à–∏–±–∫–∞ {E}'}


# –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def search_users(city: str, sex: int, bdate: int):
    try:
        param = {'user_ids': id, 'sex': sex,
                 'birth_year': bdate, 'hometown': city, 'count': 5}
        response = user_session.method('users.search', param)
        data = [{'id': user['id'],
                 'first_name': user['first_name'],
                 'last_name': user['last_name']} for user in response['items']]
        return data
    except Exception as E:
        return f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {E}'


# –ø–æ–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–µ—Ç
async def search(user_id: int, home_town: str = None):
    result = await user_data(user_id)
    if not isinstance(result, dict):
        bdate, sex, city = result
        # –µ—Å–ª–∏ home_town –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–º–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥
        if home_town:
            city = home_town
        # –µ—Å–ª–∏ –∏ —Ç–æ –∏ —Ç–æ None
        if not city:
            text = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å'
            return text
        text = await search_users(city, sex, bdate)
        user_candidate[user_id] = text
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_iterators[user_id] = UserIterator(user_candidate[user_id])
    else:
        text = result['message']
    return text


async def main():
    for event in longpoll.listen():
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

        if event.type == VkBotEventType.MESSAGE_NEW:
            your_id = event.obj.message['from_id']
            check_user = await user_data(your_id)
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥—Ä –∏ –ø–æ–ª
            if not isinstance(check_user, dict):
                bdate, sex, city = check_user
                if bdate and sex:
                    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
                    if event.obj.message.get('geo'):
                        city = event.obj.message.get('geo')['place']['city']
                        if not user_candidate.get(your_id):
                            await search(your_id, city)
                        try:
                            user = next(user_iterators[your_id])
                            await send_choose_message(your_id, f"{user['first_name']} {user['last_name']}", user['id'])
                        except Exception as E:
                            await send_message(your_id, f'–ª—é–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å {E}')

                    else:
                        await send_start_message(your_id, f"—á—Ç–æ –¥–µ–ª–∞–µ–º?")
            else:
                await send_message(your_id, check_user['message'])

        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è(–∫–Ω–æ–ø–∫–∏)
        elif event.type == VkBotEventType.MESSAGE_EVENT:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
            payload = event.object.payload.get('button')
            button_id = event.object.payload.get(event.object.user_id)
            match payload:
                case 'dislike':
                    await send_message(event.object.user_id, f"–í—ã –Ω–∞–∂–∞–ª–∏ üíî {button_id}")
                case 'like':
                    await send_message(event.object.user_id, f"–í—ã –Ω–∞–∂–∞–ª–∏ ‚ù§ {button_id}")
                case ('next' | 'search'):
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not user_candidate.get(event.object.user_id):
                        await search(event.object.user_id)
                    try:
                        user = next(user_iterators[event.object.user_id])
                        await send_choose_message(event.object.user_id,
                                                  f"{user['first_name']} {user['last_name']}\nhttps://vk.com/id{user['id']}",
                                                  user['id'])
                    except:
                        user_candidate[event.object.user_id].clear()  # –æ—á–∏—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä
                        del user_iterators[event.object.user_id]
                        await send_message(event.object.user_id, '–ª—é–¥–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å')
                case 'geo':
                    await geo_user(event.object.user_id, f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
