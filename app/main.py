from config import VK_TOKEN, GROUP_ID, USER_TOKEN
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
vk_session = vk_api.VkApi(token=VK_TOKEN)
user_session = vk_api.VkApi(token=USER_TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)


def user_generator(users):
    for user in users:
        yield user

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


async def send_start_message(user_id, message):
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_callback_button('üß≤ –ø–æ–∏—Å–∫', color=VkKeyboardColor.NEGATIVE, payload={
                                 "button": "search"})
    keyboard.add_callback_button('üåè —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ', color=VkKeyboardColor.POSITIVE, payload={
                                 "button": "geo"})

    params = {
        'user_id': user_id,
        'message': message,
        'keyboard': keyboard.get_keyboard(),
        'random_id': vk_api.utils.get_random_id()
    }
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, lambda: vk.messages.send(**params))


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏


async def send_choose_message(user_id: int, message: str, candidate_id: int):
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_callback_button('üíî', color=VkKeyboardColor.NEGATIVE, payload={
                                 "button": "dislike", "id": candidate_id})
    keyboard.add_callback_button('‚ù§', color=VkKeyboardColor.POSITIVE, payload={
                                 "button": "like", "id": candidate_id})
    keyboard.add_callback_button('—Å–ª–µ–¥—É—é—â–∏–π(–∞—è)', color=VkKeyboardColor.PRIMARY,
                                 payload={"button": "next", "id": candidate_id})
    params = {
        'user_id': user_id,
        'message': message,
        'keyboard': keyboard.get_keyboard(),
        'random_id': vk_api.utils.get_random_id()
    }
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, lambda: vk.messages.send(**params))


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

async def send_message(user_id, message):
    params = {
        'user_id': user_id,
        'message': message,
        'random_id': vk_api.utils.get_random_id()
    }
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, lambda: vk.messages.send(**params))

# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏


async def geo_user(user_id, message):
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_location_button()
    params = {
        'user_id': user_id,
        'message': message,
        'keyboard': keyboard.get_keyboard(),
        'random_id': vk_api.utils.get_random_id()
    }
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, lambda: vk.messages.send(**params))

# –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ


async def search_users_in_group(id: int):
    try:
        params = {
            'group_id': GROUP_ID,
            'user_ids': id,
            'count': 1,
            'fields': 'city,sex,bdate'}
        response = vk_session.method('groups.getMembers', params)
        return response['items']
    except:
        return '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞'

# –ø–æ–ª—É—á–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫–µ–º —á–∞—Ç)


async def user_data(id: int):
    # try:
    params = {'user_ids': id, 'fields': 'sex,bdate,home_town'}
    response = vk_session.method('users.get', params)
    response = response[0]
    bdate = response.get('bdate')
    sex = response.get('sex')
    city = response.get('home_town')
    if bdate:
        bdate = bdate.split('.')[-1]
    else:
        bdate = None
    match sex:
        case 1:
            sex = 2
        case 2:
            sex = 1
    if bdate and sex:
        return bdate, sex, city
    return {'message': '–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª–µ '+'–≤–æ–∑—Ä–∞—Å—Ç ' if not bdate else ''+'–ø–æ–ª' if not sex else ''}
    # except Exception as E:
    #     return {'message': f'–æ—à–∏–±–∫–∞ {E}'}


# –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def search_users(city: str, sex: int, bdate: int):
    # try:, 'city': city
    params = {'user_ids': id, 'sex': sex,
              'birth_year': bdate, 'hometown': city}
    response = user_session.method('users.search', params)
    data = [{'id': user['id'],
             'first_name': user['first_name'],
             'last_name': user['last_name']} for user in response['items']]
    return data
    # except:
    #     return '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞'


# –ø–æ–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–µ—Ç
async def search(id: int, home_town: str = None):
    result = await user_data(id)
    if not isinstance(result, dict):
        bdate, sex, city = result
        # –µ—Å–ª–∏ home_town –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–º–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥
        if home_town:
            city = home_town
        # –µ—Å–ª–∏ –∏ —Ç–æ –∏ —Ç–æ None
        if not city:
            text = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å'
            return text
        text = await search_users(city, sex, bdate)
    else:
        text = result['message']
    return text


async def main():
    for event in longpoll.listen():
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if event.type == VkBotEventType.MESSAGE_NEW:
            your_id = event.obj.message['from_id']
            # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
            if event.obj.message.get('geo'):
                city = event.obj.message.get('geo')['place']['city']
                users = await search(your_id, city)
                users = user_generator(users)
                user = next(users)
                await send_choose_message(your_id, f"{user['first_name']} {user['last_name']}", user['id'])
            else:
                await send_start_message(event.obj.message['from_id'], f"—á—Ç–æ –¥–µ–ª–∞–µ–º?")
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è(–∫–Ω–æ–ø–∫–∏)
        elif event.type == VkBotEventType.MESSAGE_EVENT:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
            payload = event.object.payload.get('button')
            button_id = event.object.payload.get('id')
            match payload:
                case 'dislike':
                    await send_message(event.object.user_id, f"–í—ã –Ω–∞–∂–∞–ª–∏ üíî {button_id}")
                case 'like':
                    await send_message(event.object.user_id, f"–í—ã –Ω–∞–∂–∞–ª–∏ ‚ù§ {button_id}")
                case 'next':
                    await send_message(event.object.user_id, "–í—ã –Ω–∞–∂–∞–ª–∏ '–°–ª–µ–¥—É—é—â–∏–π(–∞—è)'")
                case 'search':
                    text = await search(your_id)
                    print(text)
                case 'geo':
                    await geo_user(event.object.user_id, f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")

if __name__ == '__main__':
    asyncio.run(main())
